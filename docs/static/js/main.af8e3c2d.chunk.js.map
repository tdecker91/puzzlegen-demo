{"version":3,"sources":["components/PuzzleGenPNG.tsx","img/logo.svg","components/Logo.tsx","data/color.ts","components/SchemeForm.tsx","components/select/SelectEditCustomItem.tsx","components/MaskForm.tsx","data/scheme.ts","data/face.ts","data/mask.ts","components/StickersForm.tsx","components/ArrowsForm.tsx","data/rotations.ts","data/size.ts","util/algorithms.ts","components/OptionsForm.tsx","components/ExampleCode.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PuzzleGenPNG","props","puzzleRef","render$","Subject","React","createRef","pipe","debounce","interval","subscribe","renderPNG","this","removeRender","current","PNG","type","options","e","console","warn","firstChild","removeChild","next","prevProps","prevOptions","JSON","stringify","style","minHeight","height","className","ref","Component","Logo","src","logo","AllColors","Red","Colors","RED","name","Orange","ORANGE","Yellow","YELLOW","Green","GREEN","Blue","BLUE","White","WHITE","LIGHT_YELLOW","LIGHT_GREEN","DARK_BLUE","PINK","PURPLE","GREY","BLACK","SchemeForm","scheme","useForm","form","title","visible","onOk","parsed","values","Object","keys","reduce","prev","parse","parseFormValues","getFieldsValue","onCancel","initialValues","labelCol","span","wrapperCol","map","face","Item","label","color","Option","value","SelectEditCustomItem","display","flexWrap","padding","flex","cursor","onClick","onEditCustom","numberListRule","message","validator","_","numbers","split","i","length","parseInt","Number","isNaN","isInteger","isFinite","Promise","reject","resolve","MaskForm","mask","useState","okDisabled","setOkDisabled","v","okButtonProps","disabled","Text","join","onBlur","setTimeout","getFieldsError","some","item","errors","validateTrigger","index","rules","placeholder","DEFAULT_CUBE_SCHEME","U","R","F","D","L","B","DEFAULT_MEGAMINX_SCHEME","dr","Pink","dl","d","Gray","br","BR","BL","Purple","bl","b","DEFAULT_PYRAMINX_SCHEME","left","right","top","back","DEFAULT_SKEWB_SCHEME","front","bottom","DEFAULT_SQUARE1_SCHEME","DEFAULT_SCHEMES","Type","CUBE","CUBE_NET","CUBE_TOP","MEGAMINX","MEGAMINX_NET","MEGAMINX_TOP","PYRAMINX","PYRAMINX_NET","SKEWB","SKEWB_NET","SQUARE1","SQUARE1_NET","CUBE_FACES","MEGAMINX_FACES","PYRAMINX_FACES","SKEWB_FACES","SQUARE1_FACES","PUZZLE_FACES","DEFAULT_MASK","faces","getMasks","size","puzzle","Masks","CUBE_3","MEGA_3","colorOptions","tagColorsOverride","StickersForm","setOptions","stickerColors","faceColors","setFaceColors","onSearch","searchText","search","toLowerCase","filteredColors","filter","colorName","includes","closable","onClose","preventDefault","newFaceColors","removeColor","onSelect","o","option","onFocus","ArrowsForm","arrows","setArrows","offset","hidden","arrow","newArrows","removeArrow","start","sticker","end","face1","sticker1","face2","sticker2","addArrow","DEFAULT_ROTATIONS","x","y","z","DEFAULT_PUZZLE_SIZES","algorithmValid","alg","trim","valid","Algorithm","parseCubeAlgorithm","parseMegaminxAlgorithm","parsePyraminxAlgorithm","parseSkewbAlgorithm","Square1Simualtor","parseAlg","Error","errorMessage","OptionsForm","puzzleFaceColors","initialType","curr","showSchemeForm","setShowSchemeForm","showMaskForm","setShowMaskForm","showStickersForm","setShowStickersForm","showArrowsForm","setShowArrowsForm","setScheme","customMask","setCustomMask","setStickerColors","width","stroke","case","X","rotations","Y","Z","masks","setMasks","validAlg","setValidAlg","validCase","setValidCase","useEffect","onClickApply","onFormChange","changes","newOptions","newMasks","setFieldsValue","trimmedColors","forEach","selectedMaskName","getFieldValue","maskValue","onApply","shouldHideSize","onValuesChange","min","step","onChange","validateStatus","help","hasFeedback","TextArea","allowClear","dropdownRender","menu","dropDownRenderer","onSaveScheme","onSaveMask","colors","onSaveColors","onSaveArrows","margin","ExampleCode","text","makePuzzleGenCode","language","theme","vs2015","prettyPrintArray","json","indentation","output","k","Array","replace","Title","Header","Content","Sider","defaultOptions","removeUnecessaryOptions","displayOptions","isArray","strokeWidth","App","setType","formValues","setFormValues","drawerOpen","setDrawerOpen","window","innerWidth","setWidth","optionsForm","drawer","placement","position","sider","addEventListener","icon","MenuOutlined","ghost","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af8e3c2d.chunk.js","sourcesContent":["import React, { RefObject } from \"react\";\nimport { PNG, PNGVisualizerOptions, Type } from \"sr-puzzlegen\";\nimport { Subject, interval } from \"rxjs\";\nimport { debounce } from \"rxjs/operators\";\n\nexport type PuzzleGenProps = {\n  type: Type,\n  options?: PNGVisualizerOptions\n}\n\nclass PuzzleGenPNG extends React.Component<PuzzleGenProps> {\n\n  private puzzleRef: RefObject<HTMLDivElement>;\n  private render$ = new Subject();\n\n  constructor(props: PuzzleGenProps) {\n    super(props);\n    this.puzzleRef = React.createRef();\n\n    // If props are updated too quickly we end up with multiple\n    // images in the dom. Debounce render events to prevent this\n    this.render$\n      .pipe(debounce(() => interval(25)))\n      .subscribe(() => { \n        this.renderPNG();\n      });\n  }\n\n  private renderPNG() {\n    this.removeRender();\n    try {\n      this.puzzleRef.current && PNG(this.puzzleRef.current, this.props.type, this.props.options);\n    } catch (e) {\n      console.warn(\"Error rendering puzzle\", e);\n    }\n  }\n\n  private removeRender() {\n    while (this.puzzleRef.current && this.puzzleRef.current.firstChild) {\n      this.puzzleRef.current.removeChild(this.puzzleRef.current.firstChild);\n    }\n  }\n\n  componentDidMount() {\n    if (this.puzzleRef.current) {\n      this.render$.next();\n    }\n  }\n\n  componentDidUpdate(prevProps: any) {\n    const prevOptions = JSON.stringify(prevProps.options);\n    const options = JSON.stringify(this.props.options);\n    if (\n      prevProps.type !== this.props.type ||\n      prevOptions !== options\n    ) {\n      this.render$.next();\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ minHeight: this.props.options?.height || 0 }} className=\"img-wrap\" ref={this.puzzleRef}></div>\n    )\n  }\n\n}\n\nexport default PuzzleGenPNG;","export default __webpack_public_path__ + \"static/media/logo.ba4349ff.svg\";","import logo from '../img/logo.svg';\n\nfunction Logo() {\n  return (\n    <>\n      <img src={logo}></img>\n    </>\n  )\n}\n\nexport default Logo;","import { Face } from './face';\nimport { IColor } from \"sr-puzzlegen/dist/lib/geometry/color\";\nimport { Colors } from \"sr-puzzlegen\";\n\nexport interface NamedColor extends IColor {\n  name: string;\n}\n\nexport const AllColors: { [color: string]: NamedColor } = {\n  Red: {...Colors.RED, name: \"RED\"},\n  Orange: {...Colors.ORANGE, name:\"ORANGE\"},\n  Yellow: {...Colors.YELLOW, name:\"YELLOW\"},\n  Green: {...Colors.GREEN, name:\"GREEN\"},\n  Blue: {...Colors.BLUE, name:\"BLUE\"},\n  White: {...Colors.WHITE, name:\"WHITE\"},\n  \"Light Yellow\": {...Colors.LIGHT_YELLOW, name:\"LIGHT_YELLOW\"},\n  \"Light Green\": {...Colors.LIGHT_GREEN, name:\"LIGHT_GREEN\"},\n  \"Dark Blue\": {...Colors.DARK_BLUE, name:\"DARK_BLUE\"},\n  \"Pink\": {...Colors.PINK, name:\"PINK\"},\n  \"Purple\": {...Colors.PURPLE, name:\"PURPLE\"},\n  \"Gray\": {...Colors.GREY, name:\"GREY\"},\n  \"Black\": {...Colors.BLACK, name:\"BLACK\"}\n}\n\nexport type StickerColors = {\n  [face: string]: NamedColor[];\n}","import { Modal, Form, Select } from 'antd';\nimport { AllColors } from '../data/color';\nimport { Scheme } from '../data/scheme';\n\ntype SchemeFormProps = {\n  visible: boolean;\n  onOk: (scheme: any) => void;\n  onCancel: () => void;\n  scheme: Scheme\n}\n\nconst colorOptions = () => {\n  return Object.keys(AllColors).map(color => (\n    <Select.Option value={JSON.stringify(AllColors[color])} key={color}>{color}</Select.Option>\n  ));\n}\n\nconst parseFormValues = (values: { [face: string]: string }) => \n  Object.keys(values)\n  .reduce((prev, current) => ({\n    ...prev,\n    [current]: JSON.parse(values[current])\n  }), {});\n\nconst stringifySchemeValues = (scheme: Scheme) => Object.keys(scheme)\n.reduce((prev, current) => ({\n  ...prev, \n  [current]: JSON.stringify(scheme[current])\n}), {});\n\nexport default function SchemeForm(props: SchemeFormProps) {\n  const [form] = Form.useForm();\n\n  const onOk = () => {\n    const values = form.getFieldsValue();\n    const parsed = parseFormValues(values);\n    props.onOk(parsed);\n  }\n  \n  return (\n    <Modal \n      title=\"Scheme Editor\" \n      visible={props.visible} \n      onOk={ onOk }\n      onCancel={() => props.onCancel() }>\n      <Form \n        initialValues={stringifySchemeValues(props.scheme)}\n        form={form}\n        labelCol={{ span: 4 }} \n        wrapperCol={{ span: 12 }}>\n        {Object.keys(props.scheme).map(face => (\n          <Form.Item label={face} name={face} key={face}>\n            <Select>\n              {colorOptions()}\n            </Select>\n          </Form.Item>\n        ))}\n      </Form>\n    </Modal>\n  );\n}","import { Divider, Input } from \"antd\";\n\ntype SelectEditCustomItemProps = {\n  onEditCustom: () => void\n}\n\nexport default function SelectEditCustomItem(props: SelectEditCustomItemProps) {\n  return (\n    <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\n      <a\n        style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\n        onClick={props.onEditCustom}\n      >\n        Edit Custom\n      </a>\n    </div>\n  );\n}","import { Modal, Form, Input, Typography } from 'antd';\nimport { Mask } from '../data/mask';\nimport { useState } from 'react';\n\n\ntype MaskFormProps = {\n  visible: boolean;\n  onOk: (mask: { [face: string]: number[] }) => void;\n  onCancel: () => void;\n  mask: { [face: string]: number[] }\n}\n\nconst numberListRule = {\n  message: \"Must be a list of number separated by comma (ex '0,1,2,3')\",\n  validator: (_: any, value: string) => {\n    if (value && typeof value === \"string\") {\n      try {\n        const numbers = value.split(\",\")\n        for (let i = 0; i < numbers.length; i++) {\n          const parsed = parseInt(numbers[i]);\n          if (Number.isNaN(parsed) || !Number.isInteger(parsed) || !Number.isFinite(parsed)) {\n            return Promise.reject();\n          }\n        }\n\n        return Promise.resolve();\n      } catch {\n        return Promise.reject();\n      }\n    }\n\n    return Promise.resolve();\n  }\n}\n\nconst stringifyMaskValues = (mask: Mask) => Object.keys(mask)\n  .reduce((prev, current) => ({\n    ...prev,\n    [current]: mask[current].join(\",\")\n  }), {});\n\n\nexport default function MaskForm(props: MaskFormProps) {\n  const [form] = Form.useForm();\n\n  const onOk = () => {\n    const values = form.getFieldsValue();\n    const parsed = Object.keys(values).reduce((prev, current) => ({\n      ...prev,\n      [current]: values[current]\n        ? values[current].split(\",\").map((v: string) => parseInt(v))\n        : []\n    }), {});\n    props.onOk(parsed);\n  }\n\n  const [okDisabled, setOkDisabled] = useState(false);\n\n  const isFormValid = () => form.getFieldsError().some(item => item.errors.length > 0);\n\n  return (\n    <Modal\n      title=\"Mask Editor\"\n      visible={props.visible}\n      onOk={onOk}\n      onCancel={() => props.onCancel()}\n      okButtonProps={{ disabled: okDisabled }}>\n      <Typography.Text>Enter the indicies of the stickers to mask out on each face</Typography.Text>\n      <Form\n        form={form}\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 12 }}\n        initialValues={stringifyMaskValues(props.mask)}\n        onBlur={() => setTimeout(() => setOkDisabled(isFormValid()))}\n        validateTrigger=\"onBlur\">\n\n        {Object.keys(props.mask).map((face, index) => (\n          <Form.Item\n            label={face}\n            name={face}\n            key={face}\n            rules={[numberListRule]}>\n            <Input placeholder={index === 0 ? \"0,1,2\" : \"\"} />\n          </Form.Item>\n        ))}\n\n      </Form>\n    </Modal>\n  )\n}","import { AllColors } from './color';\nimport { IColor } from 'sr-puzzlegen/dist/lib/geometry/color';\nimport { Type } from \"sr-puzzlegen\";\n\nexport type Scheme = {\n  [face: string]: IColor\n}\n\nconst DEFAULT_CUBE_SCHEME: Scheme = {\n  U: AllColors.Yellow,\n  R: AllColors.Red,\n  F: AllColors.Blue,\n  D: AllColors.White,\n  L: AllColors.Orange,\n  B: AllColors.Green,\n}\n\nconst DEFAULT_MEGAMINX_SCHEME: Scheme = {\n  U: AllColors.White,\n  F: AllColors.Red,\n  R: AllColors.Blue,\n  dr: AllColors.Pink,\n  dl: AllColors[\"Light Yellow\"],\n  L: AllColors.Green,\n  d: AllColors.Gray,\n  br: AllColors[\"Light Green\"],\n  BR: AllColors.Yellow,\n  BL: AllColors.Purple,\n  bl: AllColors[\"Dark Blue\"],\n  b: AllColors.Orange\n}\n\nconst DEFAULT_PYRAMINX_SCHEME: Scheme = {\n  left: AllColors.Blue,\n  right: AllColors.Green,\n  top: AllColors.Yellow,\n  back: AllColors.Red,\n}\n\nconst DEFAULT_SKEWB_SCHEME: Scheme = {\n  top: AllColors.Yellow,\n  front: AllColors.Blue,\n  right: AllColors.Red,\n  back: AllColors.Green,\n  left: AllColors.Orange,\n  bottom: AllColors.White,\n}\n\nconst DEFAULT_SQUARE1_SCHEME: Scheme = {\n  top: AllColors.Yellow,\n  front: AllColors.Red,\n  right: AllColors.Green,\n  back: AllColors.Orange,\n  left: AllColors.Blue,\n  bottom: AllColors.White,\n}\n\nexport const DEFAULT_SCHEMES: { [key in Type]: Scheme } = {\n  [Type.CUBE]: DEFAULT_CUBE_SCHEME,\n  [Type.CUBE_NET]: DEFAULT_CUBE_SCHEME,\n  [Type.CUBE_TOP]: DEFAULT_CUBE_SCHEME,\n  [Type.MEGAMINX]: DEFAULT_MEGAMINX_SCHEME,\n  [Type.MEGAMINX_NET]: DEFAULT_MEGAMINX_SCHEME,\n  [Type.MEGAMINX_TOP]: DEFAULT_MEGAMINX_SCHEME,\n  [Type.PYRAMINX]: DEFAULT_PYRAMINX_SCHEME,\n  [Type.PYRAMINX_NET]: DEFAULT_PYRAMINX_SCHEME,\n  [Type.SKEWB]: DEFAULT_SKEWB_SCHEME,\n  [Type.SKEWB_NET]: DEFAULT_SKEWB_SCHEME,\n  [Type.SQUARE1]: DEFAULT_SQUARE1_SCHEME,\n  [Type.SQUARE1_NET]: DEFAULT_SQUARE1_SCHEME,\n}","import { Type } from 'sr-puzzlegen';\nexport type Face = string;\n\nconst CUBE_FACES: Face[] = [\n  \"U\",\n  \"R\",\n  \"F\",\n  \"D\",\n  \"L\",\n  \"B\",\n];\n\nconst MEGAMINX_FACES: Face[] = [\n  \"U\",\n  \"R\",\n  \"F\",\n  \"dr\",\n  \"dl\",\n  \"L\",\n  \"d\",\n  \"br\",\n  \"BR\",\n  \"BL\",\n  \"bl\",\n  \"b\"\n];\n\nconst PYRAMINX_FACES: Face[] = [\n  \"left\",\n  \"right\",\n  \"top\",\n  \"back\",\n]\n\nconst SKEWB_FACES: Face[] = [\n  \"top\",\n  \"right\",\n  \"front\",\n  \"bottom\",\n  \"left\",\n  \"back\"\n];\n\nconst SQUARE1_FACES: Face[] = [\n  \"top\",\n  \"right\",\n  \"front\",\n  \"bottom\",\n  \"left\",\n  \"back\"\n];\n\nexport const PUZZLE_FACES: { [key in Type]: Face[] } = {\n  [Type.CUBE]: CUBE_FACES,\n  [Type.CUBE_NET]: CUBE_FACES,\n  [Type.CUBE_TOP]: CUBE_FACES,\n  [Type.MEGAMINX]: MEGAMINX_FACES,\n  [Type.MEGAMINX_NET]: MEGAMINX_FACES,\n  [Type.MEGAMINX_TOP]: MEGAMINX_FACES,\n  [Type.PYRAMINX]: PYRAMINX_FACES,\n  [Type.PYRAMINX_NET]: PYRAMINX_FACES,\n  [Type.SKEWB]: SKEWB_FACES,\n  [Type.SKEWB_NET]: SKEWB_FACES,\n  [Type.SQUARE1]: SQUARE1_FACES,\n  [Type.SQUARE1_NET]: SQUARE1_FACES,\n}","import { Face, PUZZLE_FACES } from './face';\nimport { Type, Masks } from 'sr-puzzlegen';\n\nexport type Mask = {\n  [face: string]: number[];\n}\n\ntype DefaultMasks = { [key in Type]: Mask };\n\nexport const DEFAULT_MASK: DefaultMasks = \n  /**\n   * For each puzzle create an empty mask, which is just\n   * every face of the puzzle mapped to an empty array\n   * \n   * ex {\n   *    \"cube\": {\n   *      U: [],\n   *      R: [],\n   *      ...\n   *    }\n   * }\n   */\n  Object.keys(PUZZLE_FACES)\n    .map((type: string) => [\n        type as Type,\n        PUZZLE_FACES[type as Type].reduce((prev, face) => ({\n          ...prev,\n          [face]: []\n        }), {})\n      ])\n    .reduce((prev, [type, faces]) => ({\n      ...prev,\n      [type as Type]: faces\n    }), {} as DefaultMasks);\n\nexport function getMasks(size: number, puzzle: Type): { [mask: string]: any } {\n  switch(puzzle) {\n    case Type.CUBE:\n    case Type.CUBE_NET:\n    case Type.CUBE_TOP:\n      return size === 3 ? Masks.CUBE_3 : {};\n    case Type.MEGAMINX:\n    case Type.MEGAMINX_NET:\n    case Type.MEGAMINX_TOP:\n      return size === 2 ? Masks.MEGA_3 : {};\n    default:\n      return {};\n  }\n}","import { Form, Modal, Tag, AutoComplete } from 'antd';\nimport { AllColors, StickerColors } from '../data/color';\nimport { useState } from 'react';\n\ntype StickersFormProps = {\n  visible: boolean;\n  onOk: (colors: StickerColors) => void;\n  onCancel: () => void;\n  stickerColors: StickerColors;\n}\n\nconst colorOptions = Object.keys(AllColors);\n\nconst tagColorsOverride: { [color: string]: string } = {\n  WHITE: \"default\",\n  LIGHT_YELLOW: \"default\",\n  YELLOW: \"gold\",\n}\n\nexport default function StickersForm(props: StickersFormProps) {\n  const [form] = Form.useForm();\n\n  const [options, setOptions] = useState<{ value: string }[]>([]);\n  const [faces, setFaces] = useState(Object.keys(props.stickerColors));\n  const [faceColors, setFaceColors] = useState(props.stickerColors);\n\n  const onSearch = (searchText: string) => {\n    const search = searchText.toLowerCase();\n    const filteredColors = colorOptions\n      .filter(colorName => colorName.toLowerCase().includes(search))\n      .map(colorName => ({ value: colorName }));\n\n    setOptions(filteredColors);\n  }\n\n  const onSelect = (value: any, option: any, face: string) => {\n    const newFaceColors = {\n      ...faceColors,\n      [face]: [...faceColors[face], AllColors[value]]\n    }\n    setFaceColors(newFaceColors);\n  };\n\n  const removeColor = (e: any, face: string, index: number) => {\n    e.preventDefault();\n\n    const newFaceColors = {\n      ...faceColors,\n      [face]: faceColors[face].filter((v, i) => i !== index)\n    }\n\n    setFaceColors(newFaceColors);\n  }\n\n  const onOk = () => {\n    props.onOk(faceColors);\n  }\n\n  return (\n    <Modal\n      title=\"Stickers Editor\"\n      visible={props.visible}\n      onOk={onOk}\n      onCancel={() => props.onCancel()}>\n      <Form\n        form={form}\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 12 }}\n      >\n        {faces.map(face => (\n          <Form.Item label={face} key={face}>\n            {faceColors[face].map((color, index) => (\n              <Tag\n                closable\n                onClose={(e) => removeColor(e, face, index)}\n                color={tagColorsOverride[color.name] || color.value}\n                key={index}\n              >\n                {color.name}\n              </Tag>\n            ))}\n            <AutoComplete\n              options={options}\n              onSelect={(v: any, o: any) => onSelect(v, o, face)}\n              onFocus={() => onSearch(\"\")}\n              onSearch={onSearch} />\n          </Form.Item>\n        ))}\n      </Form>\n    </Modal>\n  )\n}","import { Form, Modal, Select, InputNumber, Button, Tag } from 'antd';\nimport { useState } from 'react';\nimport { ArrowDefinition } from 'sr-puzzlegen';\n\ntype ArrowsFormProps = {\n  visible: boolean;\n  arrows: ArrowDefinition[];\n  faces: String[];\n  onOk: (arrows: ArrowDefinition[]) => void;\n  onCancel: () => void;\n}\n\nexport default function ArrowsForm(props: ArrowsFormProps) {\n  const [form] = Form.useForm();\n\n  const [arrows, setArrows] = useState<ArrowDefinition[]>(JSON.parse(JSON.stringify(props.arrows)));\n\n  const addArrow = () => {\n    let { face1, sticker1, face2, sticker2 } = form.getFieldsValue();\n    if (face1 && !isNaN(sticker1) && face2 && !isNaN(sticker2)) {\n      setArrows([\n        ...arrows,\n        {\n          start: {\n            face: face1,\n            sticker: sticker1\n          },\n          end: {\n            face: face2,\n            sticker: sticker2\n          }\n        } as ArrowDefinition\n      ])\n    }\n  }\n\n  const removeArrow = (e: any, index: number) => {\n    e.preventDefault();\n    const newArrows = arrows.filter((value, i) => i !== index)\n    setArrows(newArrows);\n  }\n\n  const onOk = () => {\n    props.onOk(arrows);\n  }\n\n  return (\n    <Modal\n      title=\"Arrows Editor\"\n      visible={props.visible}\n      onOk={onOk}\n      onCancel={props.onCancel}>\n      <Form\n        form={form}\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 12 }}\n      >\n        <Form.Item wrapperCol={{ offset: 4 }} hidden={!arrows || arrows.length == 0}>\n          {arrows.map((arrow, index) => (\n            <Tag\n              closable\n              onClose={(e) => removeArrow(e, index)}\n              key={index}\n            >\n              {`${arrow.start.face}${arrow.start.sticker}:${arrow.end.face}${arrow.end.sticker}`}\n            </Tag>\n          ))}\n        </Form.Item>\n        <Form.Item label=\"start\">\n          <Form.Item name=\"face1\">\n            <Select placeholder=\"face\">\n              {props.faces.map((face, index) => (\n                <Select.Option value={face} key={index}>{face}</Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"sticker1\">\n            <InputNumber placeholder=\"index\" />\n          </Form.Item>\n        </Form.Item>\n\n        <Form.Item label=\"end\">\n          <Form.Item name=\"face2\">\n            <Select placeholder=\"face\">\n              {props.faces.map((face, index) => (\n                <Select.Option value={face} key={index}>{face}</Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"sticker2\">\n            <InputNumber placeholder=\"index\" />\n          </Form.Item>\n        </Form.Item>\n        <Form.Item wrapperCol={{ offset: 4 }}>\n          <Button onClick={() => addArrow()}> Add Arrow</Button>\n        </Form.Item>\n      </Form>\n    </Modal>\n  )\n}","import { Type } from \"sr-puzzlegen\";\n\nexport const DEFAULT_ROTATIONS = {\n  [Type.CUBE]: { x: 43, y: 35, z: 29 },\n  [Type.CUBE_NET]: { x: 0, y: 0, z: 0 },\n  [Type.CUBE_TOP]: { x: 0, y: 0, z: 0 },\n  [Type.MEGAMINX]: { x: 0, y: 0, z: 0 },\n  [Type.MEGAMINX_NET]: { x: 0, y: 0, z: 0 },\n  [Type.MEGAMINX_TOP]: { x: 0, y: 0, z: 0 },\n  [Type.PYRAMINX]: { x: 0, y: 0, z: 0 },\n  [Type.PYRAMINX_NET]: { x: 0, y: 0, z: 0 },\n  [Type.SKEWB]: { x: 43, y: 35, z: 29 },\n  [Type.SKEWB_NET]: { x: 0, y: 0, z: 0 },\n  [Type.SQUARE1]: { x: -50.8, y: -27.6, z: -20.6 },\n  [Type.SQUARE1_NET]: { x: 0, y: 0, z: 0 }\n}","import { Type } from \"sr-puzzlegen\";\n\nexport const DEFAULT_PUZZLE_SIZES = {\n  [Type.CUBE]: 3,\n  [Type.CUBE_NET]: 3,\n  [Type.CUBE_TOP]: 3,\n  [Type.MEGAMINX]: 2,\n  [Type.MEGAMINX_NET]: 2,\n  [Type.MEGAMINX_TOP]: 2,\n  [Type.PYRAMINX]: 3,\n  [Type.PYRAMINX_NET]: 3,\n  [Type.SKEWB]: 0,\n  [Type.SKEWB_NET]: 0,\n  [Type.SQUARE1]: 0,\n  [Type.SQUARE1_NET]: 0\n}","import { Type, Algorithm } from \"sr-puzzlegen\";\nimport { Turn } from \"sr-puzzlegen/dist/lib/algorithms/algorithm\";\nimport { Square1Move, Square1Simualtor } from \"sr-puzzlegen/dist/lib/simulator/square1/square1Simulator\";\n\nexport function algorithmValid(type: Type, alg: string): { valid: boolean, errorMessage?: string } {\n  if (!alg || alg.trim() === \"\") {\n    return {\n      valid: true\n    };\n  }\n\n  try {\n    parseAlg(type, alg);\n    return {\n      valid: true\n    }\n  } catch (e) {\n    let message = \"invalid algorithm\"\n    if (e instanceof Error) message = e.message;\n    if (typeof e === \"string\") message = e;\n    return {\n      valid: false,\n      errorMessage: message\n    }\n  }\n}\n\nfunction parseAlg(type: Type, alg: string): Turn[] | Square1Move[] {\n  switch (type) {\n    case Type.CUBE:\n    case Type.CUBE_NET:\n    case Type.CUBE_TOP:\n      return Algorithm.parseCubeAlgorithm(alg);\n    case Type.MEGAMINX:\n    case Type.MEGAMINX_NET:\n    case Type.MEGAMINX_TOP:\n      return Algorithm.parseMegaminxAlgorithm(alg);\n    case Type.PYRAMINX:\n    case Type.PYRAMINX_NET:\n      return Algorithm.parsePyraminxAlgorithm(alg);\n    case Type.SKEWB:\n    case Type.SKEWB_NET:\n      return Algorithm.parseSkewbAlgorithm(alg);\n    case Type.SQUARE1:\n    case Type.SQUARE1_NET:\n      let sim = new Square1Simualtor();\n      sim.alg(alg);\n\n      // sim validated the alg without error\n      return [];\n  }\n}","import { Form, Select, InputNumber, Input, Button, Divider } from 'antd';\nimport { ArrowDefinition, Type } from 'sr-puzzlegen';\nimport React, { useEffect, useState } from 'react';\nimport SchemeForm from './SchemeForm';\nimport SelectEditCustomItem from './select/SelectEditCustomItem';\nimport MaskForm from './MaskForm';\nimport { DEFAULT_SCHEMES, Scheme } from '../data/scheme';\nimport { DEFAULT_MASK, getMasks, Mask } from '../data/mask';\nimport StickersForm from './StickersForm';\nimport ArrowsForm from './ArrowsForm';\nimport { StickerColors } from '../data/color';\nimport { PUZZLE_FACES } from '../data/face';\nimport { DEFAULT_ROTATIONS } from '../data/rotations';\nimport { DEFAULT_PUZZLE_SIZES } from '../data/size';\nimport { algorithmValid } from '../util/algorithms';\n\ntype Options = {\n  width: number,\n  height: number,\n  stroke: number,\n  puzzle: Type,\n  size: number,\n  alg: string,\n  case: string,\n  scheme: string,\n  mask?: Mask,\n  stickerColors?: StickerColors,\n  arrows?: ArrowDefinition[],\n  X: number,\n  Y: number,\n  Z: number\n}\n\nexport type OptionsProps = {\n  initialValues: any;\n  initialType: Type;\n  onApply: (options: any) => void;\n}\n\nexport default function OptionsForm(props: OptionsProps) {\n  const puzzleFaceColors = PUZZLE_FACES[props.initialType].reduce((prev, curr) => ({ ...prev, [curr]: [] }), {})\n  const [showSchemeForm, setShowSchemeForm] = useState(false);\n  const [showMaskForm, setShowMaskForm] = useState(false);\n  const [showStickersForm, setShowStickersForm] = useState(false);\n  const [showArrowsForm, setShowArrowsForm] = useState(false);\n  const [scheme, setScheme] = useState<Scheme>(props.initialValues?.puzzle?.scheme);\n  const [customMask, setCustomMask] = useState<Mask>(props.initialValues?.puzzle?.mask);\n  const [stickerColors, setStickerColors] = useState<StickerColors>(puzzleFaceColors);\n  const [arrows, setArrows] = useState<ArrowDefinition[]>(props.initialValues?.puzzle?.arrows);\n\n  const [options, setOptions] = useState<Options>({\n    width: props.initialValues.width || 250,\n    height: props.initialValues.height || 250,\n    stroke: !Number.isNaN(props.initialValues.stroke) ? props.initialValues.stroke : .02,\n    size: props.initialValues.puzzle?.size || 3,\n    puzzle: props.initialType || Type.CUBE,\n    alg: props.initialValues.puzzle?.alg || '',\n    case: props.initialValues.puzzle?.case || '',\n    scheme: JSON.stringify(scheme, null, 2),\n    arrows: arrows,\n    X: props.initialValues.puzzle?.rotations[0]?.x || DEFAULT_ROTATIONS[Type.CUBE].x,\n    Y: props.initialValues.puzzle?.rotations[0]?.y || DEFAULT_ROTATIONS[Type.CUBE].y,\n    Z: props.initialValues.puzzle?.rotations[0]?.z || DEFAULT_ROTATIONS[Type.CUBE].z\n  })\n\n  const [form] = Form.useForm();\n  const [masks, setMasks] = useState<{ [mask: string]: Mask }>(getMasks(options.size, options.puzzle));\n\n  const [validAlg, setValidAlg] = useState(algorithmValid(options.puzzle, options.alg));\n  const [validCase, setValidCase] = useState(algorithmValid(options.puzzle, options.case));\n\n  useEffect(() => {\n    onClickApply();\n  }, [stickerColors, scheme, customMask, arrows, options])\n\n  const onFormChange = (changes: any) => {\n    let newOptions = {\n      ...options,\n      ...changes\n    };\n    const newMasks = getMasks(newOptions.size, newOptions.puzzle);\n    setMasks(newMasks);\n    if (!newMasks[newOptions.mask]) {\n      newOptions.mask = null;\n      form.setFieldsValue({ mask: null });\n    }\n\n    setValidAlg(algorithmValid(newOptions.puzzle, newOptions.alg));\n    setValidCase(algorithmValid(newOptions.puzzle, newOptions.case));\n\n    setOptions(newOptions);\n  }\n\n  const onSaveScheme = (scheme: Scheme) => {\n    form.setFieldsValue({ scheme: JSON.stringify(scheme, null, 2) });\n    setScheme(scheme)\n    setShowSchemeForm(false);\n  }\n\n  const onSaveMask = (mask: any) => {\n    const newMasks = getMasks(options.size, options.puzzle);\n    newMasks[\"CUSTOM\"] = mask;\n    setMasks(newMasks);\n    setCustomMask(mask);\n    form.setFieldsValue({ mask: \"CUSTOM\" });\n    setShowMaskForm(false);\n  }\n\n  const onSaveColors = (colors: StickerColors) => {\n    setStickerColors(colors);\n    setShowStickersForm(false);\n  }\n\n  const onSaveArrows = (arrows: ArrowDefinition[]) => {\n    setArrows(arrows);\n    setShowArrowsForm(false);\n  }\n\n  const onClickApply = () => {\n    const trimmedColors: any = {}\n    Object.keys(stickerColors).forEach(face => {\n      if (stickerColors[face].length > 0) {\n        trimmedColors[face] = stickerColors[face];\n      }\n    })\n\n    const selectedMaskName = form.getFieldValue(\"mask\");\n    const maskValue = selectedMaskName === \"CUSTOM\"\n      ? customMask\n      : masks[selectedMaskName];\n\n    props.onApply({\n      ...options,\n      scheme,\n      stickerColors: Object.keys(trimmedColors).length > 0 ? trimmedColors : null,\n      mask: maskValue,\n      arrows\n    });\n  }\n\n  const onPuzzleChange = (value: Type) => {\n    setScheme(DEFAULT_SCHEMES[value]);\n    setCustomMask(DEFAULT_MASK[value]);\n    const puzzleFaceColors = PUZZLE_FACES[value].reduce((prev, curr) => ({ ...prev, [curr]: [] }), {})\n    setStickerColors(puzzleFaceColors);\n\n    form.setFieldsValue({\n      X: DEFAULT_ROTATIONS[value].x,\n      Y: DEFAULT_ROTATIONS[value].y,\n      Z: DEFAULT_ROTATIONS[value].z,\n      size: DEFAULT_PUZZLE_SIZES[value]\n    });\n\n    onFormChange({\n      puzzle: value,\n      size: DEFAULT_PUZZLE_SIZES[value],\n      X: DEFAULT_ROTATIONS[value].x,\n      Y: DEFAULT_ROTATIONS[value].y,\n      Z: DEFAULT_ROTATIONS[value].z\n    })\n  }\n\n  const shouldHideSize = options.puzzle == Type.SQUARE1\n    || options.puzzle == Type.SQUARE1_NET\n    || options.puzzle == Type.SKEWB\n    || options.puzzle == Type.SKEWB_NET;\n\n  return (\n    <>\n      <Form\n        form={form}\n        labelCol={{ span: 5 }}\n        wrapperCol={{ span: 17 }}\n        initialValues={{\n          width: options.width,\n          height: options.height,\n          stroke: options.stroke,\n          puzzle: options.puzzle,\n          size: options.size,\n          alg: options.alg,\n          case: options.case,\n          scheme: options.scheme,\n          mask: options.mask,\n          X: options.X,\n          Y: options.Y,\n          Z: options.Z\n        }}\n        onValuesChange={onFormChange}\n      >\n        <Form.Item label=\"width\" name=\"width\">\n          <InputNumber min={1} />\n        </Form.Item>\n        <Form.Item label=\"height\" name=\"height\">\n          <InputNumber min={1} />\n        </Form.Item>\n        <Form.Item label=\"stroke\" name=\"stroke\">\n          <InputNumber step=\".01\" min={-0} />\n        </Form.Item>\n        <Form.Item label=\"puzzle\" name=\"puzzle\">\n          <Select onChange={onPuzzleChange}>\n            {Object.keys(Type).map(type => (\n              <Select.Option value={(Type as any)[type]} key={type}>{type}</Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item hidden={shouldHideSize} label=\"size\" name=\"size\">\n          <InputNumber min={1} />\n        </Form.Item>\n        <Form.Item label=\"alg\" name=\"alg\" validateStatus={!validAlg.valid ? \"error\" : \"\"} help={validAlg.errorMessage} hasFeedback={!validAlg.valid}>\n          <Input.TextArea />\n        </Form.Item>\n        <Form.Item label=\"case\" name=\"case\" validateStatus={!validCase.valid ? \"error\" : \"\"} help={validCase.errorMessage} hasFeedback={!validCase.valid}>\n          <Input.TextArea />\n        </Form.Item>\n        <Form.Item label=\"scheme\" name=\"scheme\" hidden={true}>\n          <Input.TextArea />\n        </Form.Item>\n        <Form.Item label=\"mask\" name=\"mask\">\n          <Select\n            allowClear={true}\n            dropdownRender={menu => dropDownRenderer(menu, () => setShowMaskForm(true))}\n          >\n            {Object.keys(masks).map(mask => (\n              <Select.Option value={mask} key={mask}>{mask}</Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"X\" name=\"X\">\n          <InputNumber step={5} />\n        </Form.Item>\n        <Form.Item label=\"Y\" name=\"Y\">\n          <InputNumber step={5} />\n        </Form.Item>\n        <Form.Item label=\"Z\" name=\"Z\">\n          <InputNumber step={5} />\n        </Form.Item>\n        <Form.Item wrapperCol={{ offset: 5 }}>\n          <Button onClick={() => setShowSchemeForm(true)}>Set Scheme</Button>\n          <Button onClick={() => setShowStickersForm(true)}>Set Stickers</Button>\n          <Button onClick={() => setShowArrowsForm(true)}>Set Arrows</Button>\n        </Form.Item>\n      </Form>\n      {showSchemeForm ? <SchemeForm\n        scheme={scheme}\n        visible={showSchemeForm}\n        onOk={(scheme) => onSaveScheme(scheme)}\n        onCancel={() => setShowSchemeForm(false)} />\n        : null}\n      {showMaskForm ? <MaskForm\n        visible={showMaskForm}\n        onOk={(customMask) => onSaveMask(customMask)}\n        onCancel={() => setShowMaskForm(false)}\n        mask={customMask} /> : null}\n      {showStickersForm ? <StickersForm\n        visible={showStickersForm}\n        onOk={(colors) => onSaveColors(colors)}\n        onCancel={() => setShowStickersForm(false)}\n        stickerColors={stickerColors} /> : null}\n      {showArrowsForm ? <ArrowsForm\n        faces={PUZZLE_FACES[options.puzzle]}\n        arrows={arrows}\n        visible={showArrowsForm}\n        onOk={(arrows) => onSaveArrows(arrows)}\n        onCancel={() => setShowArrowsForm(false)}\n      /> : null}\n\n    </>\n  )\n}\n\nconst dropDownRenderer = (menu: React.ReactElement, onEditCustom: () => void): React.ReactElement => {\n  return (\n    <div>\n      {menu}\n      <Divider style={{ margin: '4px 0' }} />\n      <SelectEditCustomItem onEditCustom={onEditCustom} />\n    </div>\n  )\n}","import React from \"react\"\nimport { CopyBlock, vs2015 } from \"react-code-blocks\"\nimport { PNGVisualizerOptions, Type } from \"sr-puzzlegen\";\nimport { PuzzleGenProps } from \"./PuzzleGenPNG\"\n\n/**\n * Component to display example code to render puzzle\n * given the puzzle options.\n */\nclass ExampleCode extends React.Component<PuzzleGenProps> {\n  render() {\n    return (\n      <CopyBlock\n        text={makePuzzleGenCode(this.props.type, this.props.options)}\n        language=\"javascript\"\n        theme={vs2015}\n      />\n    )\n  }\n}\n\n/**\n * returns a code block example to render the puzzle with the \n * given type and options\n */\nconst makePuzzleGenCode = (type: Type, options?: PNGVisualizerOptions) => `import { PNG, Type } from \"sr-puzzlegen\"\n\nlet type = \"${type}\";\nlet options = ${prettyPrintArray(options)};\n\nPNG(\"#puzzle\", type, options);\n`;\n\n/**\n * Pretty print json object with a tab indentation. But this \n * will format arrays onto a single line.\n */\nconst prettyPrintArray = (json: any, indentation: number = 2): string => {\n  if (typeof json === 'string') {\n    json = JSON.parse(json);\n  }\n  const output = JSON.stringify(json, function (k, v) {\n    if (v instanceof Array)\n      return JSON.stringify(v);\n    return v;\n  }, indentation).replace(/\\\\/g, '')\n    .replace(/\\\"\\[/g, '[')\n    .replace(/\\]\\\"/g, ']')\n    .replace(/\\\"\\{/g, '{')\n    .replace(/\\}\\\"/g, '}');\n\n  return output;\n}\n\nexport default ExampleCode","import './App.css';\nimport PuzzleGenPNG from './components/PuzzleGenPNG';\nimport { Type, PNGVisualizerOptions } from 'sr-puzzlegen';\nimport { useEffect, useState } from 'react';\nimport { Layout, Typography, Drawer, Button } from 'antd';\nimport Logo from './components/Logo';\nimport OptionsForm from './components/OptionsForm';\nimport ExampleCode from './components/ExampleCode';\nimport { DEFAULT_SCHEMES } from './data/scheme';\nimport { DEFAULT_ROTATIONS } from './data/rotations';\nimport { DEFAULT_PUZZLE_SIZES } from './data/size';\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { DEFAULT_MASK } from './data/mask';\n\nconst { Title } = Typography;\n\nconst { Header, Content, Sider } = Layout;\n\nconst defaultOptions: PNGVisualizerOptions = {\n  width: 250,\n  height: 250,\n  stroke: .02,\n  puzzle: {\n    alg: '',\n    case: '',\n    size: 3,\n    scheme: DEFAULT_SCHEMES[Type.CUBE],\n    mask: DEFAULT_MASK[Type.CUBE],\n    arrows: [],\n    rotations: [{\n      x: DEFAULT_ROTATIONS[Type.CUBE].x,\n      y: DEFAULT_ROTATIONS[Type.CUBE].y,\n      z: DEFAULT_ROTATIONS[Type.CUBE].z\n    }]\n  }\n} as any;\n\nfunction App() {\n  const [type, setType] = useState(Type.CUBE);\n  const [formValues, setFormValues] = useState<PNGVisualizerOptions>(defaultOptions);\n  const [options, setOptions] = useState<PNGVisualizerOptions>(defaultOptions);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [width, setWidth] = useState(window.innerWidth);\n\n  // width to go to mobile view\n  const breakpoint = 620;\n\n  const optionsChanged = (newOptions: any) => {\n    const values = {\n      width: newOptions.width || 0,\n      height: newOptions.height || 0,\n      strokeWidth: !Number.isNaN(newOptions.stroke) ? newOptions.stroke : .02,\n      puzzle: {\n        alg: newOptions.alg,\n        case: newOptions.case,\n        scheme: newOptions.scheme,\n        size: newOptions.size,\n        mask: newOptions.mask,\n        stickerColors: newOptions.stickerColors,\n        rotations: [{\n          x: newOptions.X,\n          y: newOptions.Y,\n          z: newOptions.Z\n        }],\n        arrows: newOptions.arrows\n      }\n    }\n    setType(newOptions.puzzle);\n    setFormValues(values);\n    setOptions(removeUnecessaryOptions(newOptions.puzzle, values as PNGVisualizerOptions));\n  }\n\n  const optionsForm = (\n    <OptionsForm onApply={optionsChanged} initialValues={formValues} initialType={type}></OptionsForm>\n  )\n\n  const drawer = (\n    <Drawer\n      placement=\"left\"\n      visible={drawerOpen}\n      style={{ position: 'absolute' }}\n      onClose={() => setDrawerOpen(false)}\n    >\n      {optionsForm}\n    </Drawer>\n  );\n\n  const sider = (\n    <Sider width={350} theme=\"light\" style={{ padding: 5 }}>\n      {optionsForm}\n    </Sider>\n  )\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\n  }, []);\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Header style={{ padding: 20 }}>\n        <Button\n          onClick={() => setDrawerOpen(!drawerOpen)}\n          icon={<MenuOutlined />}\n          ghost\n          hidden={width >= breakpoint}\n        />\n        <Logo></Logo>\n        <Title>PuzzleGen</Title>\n      </Header>\n      <Layout>\n        {width < breakpoint ? drawer : sider}\n        <Content style={{ padding: '25px 25px' }} className=\"puzzle-preview\">\n          <PuzzleGenPNG type={type} options={options} />\n          <Content style={{ padding: '25px 0px' }}>\n            <ExampleCode type={type} options={options}></ExampleCode>\n          </Content>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nconst removeUnecessaryOptions = (type: Type, options?: any): PNGVisualizerOptions => {\n  const displayOptions = {\n    ...JSON.parse(JSON.stringify(options))\n  }\n\n  if (DEFAULT_SCHEMES[type] === options?.puzzle?.scheme) {\n    delete displayOptions.puzzle?.scheme\n  }\n\n  if (Array.isArray(options?.puzzle?.rotations)\n    && options?.puzzle?.rotations.length == 1\n    && JSON.stringify(DEFAULT_ROTATIONS[type]) === JSON.stringify(options?.puzzle?.rotations[0])) {\n    delete displayOptions.puzzle?.rotations\n  }\n\n  if (!options?.puzzle?.size) {\n    delete displayOptions.puzzle?.size;\n  }\n\n  if (!options?.puzzle?.alg) {\n    delete displayOptions.puzzle?.alg;\n  }\n\n  if (!options?.puzzle?.case) {\n    delete displayOptions.puzzle?.case;\n  }\n\n  if (!options?.puzzle?.stickerColors) {\n    delete displayOptions.puzzle?.stickerColors;\n  }\n\n  if (type == Type.SQUARE1\n    || type == Type.SQUARE1_NET\n    || type == Type.SKEWB\n    || type == Type.SKEWB_NET\n    || displayOptions.puzzle?.size == DEFAULT_PUZZLE_SIZES[type]) {\n    delete displayOptions.puzzle?.size;\n  }\n\n  if (!options?.puzzle?.arrows || options?.puzzle?.arrows.length === 0) {\n    delete displayOptions.puzzle?.arrows;\n  }\n\n  if (options.strokeWidth === .02) {\n    delete displayOptions.strokeWidth;\n  }\n\n  if (JSON.stringify(displayOptions.puzzle) == \"{}\") {\n    delete displayOptions.puzzle;\n  }\n\n  return displayOptions;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}